plugins {
    id 'java-library'
    id 'de.undercouch.download' version '4.1.2'
}

group 'com.ancientmc.srgconfig'
version '0.2.0-beta'

repositories {
    mavenCentral()
    maven { url = 'https://maven.minecraftforge.net' }
    maven { url = 'https://maven.quiltmc.org/repository/release/' }
}

configurations {
    retroguard
    mcinject
}

dependencies {
    retroguard 'de.oceanlabs.mcp:RetroGuard:3.6.6'
    retroguard configurations.retroguard.dependencies
    mcinject 'de.oceanlabs.mcp:mcinjector:3.8.0'
}

import com.ancientmc.srgconfig.tasks.*

ext {
    MC_VERSION = "a1.2.6"
    DIR_DATA = "$project.projectDir\\data"
    DIR_MAPPINGS = "${DIR_DATA}\\mappings\\versions\\${MC_VERSION}"
    MAPPINGS_ZIP = "${DIR_MAPPINGS}\\mappings-${MC_VERSION}.zip"
    RGS_FILE = "${DIR_MAPPINGS}\\${MC_VERSION}.rgs"
    RGS_FILE_STRIPPED = "${DIR_MAPPINGS}\\${MC_VERSION}-stripped.rgs"
    SRG_FILE = "${DIR_MAPPINGS}\\${MC_VERSION}.srg"
    TSRG_FILE_BASE = "${DIR_MAPPINGS}\\${MC_VERSION}-base.tsrg"
    TSRG_FILE = "${DIR_MAPPINGS}\\${MC_VERSION}.tsrg"
    CLASS_CSV = "${DIR_DATA}\\csv\\versions\\${MC_VERSION}\\classes_${MC_VERSION}.csv"
    FIELDS_CSV = "${DIR_DATA}\\csv\\versions\\${MC_VERSION}\\fields_${MC_VERSION}.csv"
    METHODS_CSV = "${DIR_DATA}\\csv\\versions\\${MC_VERSION}\\methods_${MC_VERSION}.csv"

    TEST_MC_JAR = "https://piston-data.mojang.com/v1/objects/a68c817afd6c05c253ba5462287c2c19bbb57935/client.jar"
    TEST_DIR_JARS = "${DIR_DATA}\\jars"
    TEST_BASE_JAR = "${TEST_DIR_JARS}\\${MC_VERSION}.jar"
    TEST_SRG_JAR = "${TEST_DIR_JARS}\\${MC_VERSION}-srg.jar"
    TEST_INJECT_JAR = "${TEST_DIR_JARS}\\${MC_VERSION}-inject.jar"
    TEST_DECOMP_JAR = "${TEST_DIR_JARS}\\${MC_VERSION}-decomp.jar"
    TEST_DIR_TEMP = "${TEST_DIR_JARS}\\temp\\"
    TEST_DIR_CFG = "${DIR_DATA}\\cfg"
    TEST_DIR_LOGS = "${DIR_DATA}\\logs"
}

FileFilter gitIgnoreFilter = (File file) -> { return !file.getName().endsWith(".gitignore") }

clean {
    delete(file(RGS_FILE),
            file(SRG_FILE),
            file(TEST_DIR_JARS),
            file(TEST_DIR_TEMP),
            file(TEST_DIR_LOGS).listFiles(gitIgnoreFilter))
}

task buildSRG(type: GradleBuild) {
    tasks = ['extractRGSFile', 'applyClassesCSV', 'convertToSRG', 'removeUnwantedLines', 'applyFieldsCSV', 'applyMethodsCSV']
}

task testSRG(type: GradleBuild) {
    tasks = ['testDownloadJar', 'testDeobfJar', 'testUnzipJar']
}

// Extracts the base script from a ZIP file.
task extractRGSFile(type: Copy) {
    from zipTree(file(MAPPINGS_ZIP))
    into file(DIR_MAPPINGS)
}

// Appends the class mappings with packages and tweaks some of the class names.
task applyClassesCSV(type: ApplyCsv) {
    scriptFile = file(RGS_FILE)
    csvFile = file(CLASS_CSV)
}

// Removes unwanted mappings, mostly belonging to library classes.
task removeUnwantedLines(type: RemoveUnwantedLines) {
    input = file(RGS_FILE)
    output = file(RGS_FILE_STRIPPED)
}

// Converts the RGS file to a more up-to-date SRG file. This tool was originally developed by Jamie Mansfield and LexTeam.
task rgs2Srg(type: Rgs2Srg) {
    rgs = file(RGS_FILE_STRIPPED)
    srg = file(SRG_FILE)
}

// Uses Forge's SrgUtils to easily convert SRG to TSRGv2
task srg2Tsrg(type: Srg2Tsrg) {
    srg = file(SRG_FILE)
    tsrg = file(TSRG_FILE_BASE)
}

// Auto-generates param names and adds them to the TSRG file.
task addParams(type: AddParams) {
    tsrg = file(TSRG_FILE_BASE)
    jar = file(TEST_SRG_JAR)
    tsrgP = file(TSRG_FILE)
}

// Converts the fields from SRG to MCP.
task applyFieldsCSV(type: ApplyCsv) {
    scriptFile = file(SRG_FILE)
    csvFile = file(FIELDS_CSV)
}

// Converts the methods from SRG to MCP.
task applyMethodsCSV(type: ApplyCsv) {
    scriptFile = file(SRG_FILE)
    csvFile = file(METHODS_CSV)
}

// Copies the final SRG file into the final directory.
task copySRGToFinal(type: Copy) {
    from file(SRG_FILE)
    into file("final\\srg\\alpha\\")
}

// Testing task for downloading the Minecraft Jar.
task testDownloadJar(type: Download) {
    src TEST_MC_JAR
    dest TEST_BASE_JAR
}

// Testing task for deobfuscating the JAR using RetroGuard.
// Currently useless, since we're moving away from old SRG
task testDeobfJar(type: JavaExec, dependsOn: testDownloadJar) {
    mainClass = "RetroGuard"
    classpath = files(project.configurations.findByName("retroguard"))
    args("-searge", "${DIR_DATA}\\cfg\\retroguard.cfg")
}

// Injects the JAR with exceptions
task testInjectJar(type: JavaExec) {
    mainClass = 'de.oceanlabs.mcp.mcinjector.MCInjector'
    classpath = files(project.configurations.getByName("mcinject"))
    args('--in', TEST_SRG_JAR, '--out', TEST_INJECT_JAR)
}

// Testing task for unzipping the JAR in order to peek into the class files using IntelliJ's built-in version of Fernflower.
task testUnzipJar(type: Copy) {
    from zipTree(file(TEST_DECOMP_JAR))
    into file(TEST_DIR_TEMP)
}

// Currently useless
task testReobfJar(type: JavaExec) {
    mainClass = "RetroGuard"
    classpath = files(project.configurations.getByName("retroguard"))
    args("-notch", "${DIR_DATA}\\cfg\\retroguard.cfg")
}


