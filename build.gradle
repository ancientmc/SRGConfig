plugins {
    id 'java-library'
    id 'de.undercouch.download'
}

group 'com.ancientmc.srgconfig'
version '0.2.0-beta'

repositories {
    mavenCentral()
    maven { url = 'https://maven.minecraftforge.net' }
    maven { url = 'https://maven.quiltmc.org/repository/release/' }
}

configurations {
    retroguard
    forgeart
    jarsplitter
    installertools
    mcinject
}

dependencies {
    retroguard 'de.oceanlabs.mcp:RetroGuard:3.6.6'
    retroguard configurations.retroguard.dependencies
    forgeart 'net.minecraftforge:ForgeAutoRenamingTool:0.1.24'
    jarsplitter 'net.minecraftforge:jarsplitter:1.1.4'
    installertools 'net.minecraftforge:installertools:1.3.2'
    mcinject 'de.oceanlabs.mcp:mcinjector:3.8.0'
}

import com.ancientmc.srgconfig.tasks.*
import groovy.json.JsonSlurper
import net.minecraftforge.srgutils.IMappingFile

ext {
    MC_VERSION = "a1.2.6"
    DIR_DATA = "$project.projectDir\\data"
    DIR_BUILD = "$project.buildDir"
    DIR_MAPPINGS = "${DIR_DATA}\\mappings\\versions\\${MC_VERSION}"
    MAPPINGS_ZIP = "${DIR_MAPPINGS}\\mappings-${MC_VERSION}.zip"
    RGS_FILE = "${DIR_MAPPINGS}\\${MC_VERSION}.rgs"
    RGS_FILE_STRIPPED = "${DIR_MAPPINGS}\\${MC_VERSION}-stripped.rgs"
    SRG_FILE = "${DIR_MAPPINGS}\\${MC_VERSION}.srg"
    TSRG_FILE_BASE = "${DIR_MAPPINGS}\\${MC_VERSION}-base.tsrg"
    TSRG_FILE = "${DIR_MAPPINGS}\\${MC_VERSION}.tsrg"
    CLASSES_CSV = "${DIR_DATA}\\csv\\versions\\${MC_VERSION}\\classes_${MC_VERSION}.csv"
    FIELDS_CSV = "${DIR_DATA}\\csv\\versions\\${MC_VERSION}\\fields_${MC_VERSION}.csv"
    METHODS_CSV = "${DIR_DATA}\\csv\\versions\\${MC_VERSION}\\methods_${MC_VERSION}.csv"
    PARAMS_CSV = "${DIR_DATA}\\csv\\versions\\${MC_VERSION}\\params_${MC_VERSION}.csv"

    JSON = "${DIR_BUILD}\\game_data\\${MC_VERSION}.json"
    LIBRARIES = "${DIR_BUILD}\\libraries\\"
    LIBS_FILE = "${DIR_BUILD}\\map_data\\libraries-list.txt"
    INHERITANCE = "${DIR_BUILD}\\map_data\\inheritance.json"
    DIR_JARS = "${DIR_BUILD}\\jars"
    BASE_JAR = "${DIR_JARS}\\${MC_VERSION}.jar"
    SLIM_JAR = "${DIR_JARS}\\${MC_VERSION}-slim.jar"
    SRG_JAR = "${DIR_JARS}\\${MC_VERSION}-srg.jar"
    INJECT_JAR = "${DIR_JARS}\\${MC_VERSION}-inject.jar"
    DECOMP_JAR = "${DIR_JARS}\\${MC_VERSION}-decomp.jar"
    DIR_TEMP = "${DIR_JARS}\\temp\\"
    DIR_CFG = "${DIR_DATA}\\cfg"
    DIR_LOGS = "${DIR_BUILD}\\logs"
}

FileFilter gitIgnoreFilter = (File file) -> { return !file.getName().endsWith(".gitignore") }

clean {
    delete(file(RGS_FILE),
            file(SRG_FILE),
            file(DIR_JARS),
            file(DIR_TEMP),
            file(DIR_LOGS).listFiles(gitIgnoreFilter))
}

task buildSRG(type: GradleBuild) {
    tasks = ['extractRGSFile', 'applyClassesCSV', 'convertToSRG', 'removeUnwantedLines', 'applyFieldsCSV', 'applyMethodsCSV']
}

task testSRG(type: GradleBuild) {
    tasks = ['testDownloadJar', 'testDeobfJar', 'testUnzipJar']
}

task downloadVersionManifest(type: Download) {
    src 'https://piston-meta.mojang.com/mc/game/version_manifest_v2.json'
    dest DIR_BUILD + '/game_data/version_manifest.json'
}

// Downloads JSON
task downloadJson(type: DownloadJson, dependsOn: downloadVersionManifest) {
    manifest = downloadVersionManifest.dest
    version = MC_VERSION
    json = file(JSON)
}

// Downloads Libraries
task downloadLibraries(type: DownloadLibraries, dependsOn: downloadJson) {
    json = downloadJson.json
    libraries = file(LIBRARIES)
    list = file(LIBS_FILE)
}

// Downloads the JAR
task downloadJar(type: DownloadJar, dependsOn: downloadJson) {
    json = downloadJson.json
    jar = file(BASE_JAR)
}

// Extracts the base script from a ZIP file.
task extractScript(type: Copy) {
    from zipTree(file(MAPPINGS_ZIP))
    into file(DIR_MAPPINGS)
}

// Appends the class mappings with packages and tweaks some of the class names.
task applyClassesCsv(type: ApplyCsv) {
    script = file(RGS_FILE)
    csv = file(CLASSES_CSV)
}

// Removes unwanted mappings, mostly belonging to library classes.
task removeUnwantedLines(type: RemoveUnwantedLines) {
    input = file(RGS_FILE)
    output = file(RGS_FILE_STRIPPED)
}

// Converts the RGS file to a more up-to-date SRG file. This is based on a tool originally developed by Jamie Mansfield and LexTeam.
// Some things manually need to be entered in, which will hopefully be patched in the future.
task rgs2Srg(type: Rgs2Srg) {
    rgs = file(RGS_FILE_STRIPPED)
    srg = file(SRG_FILE)
}

// Strips the jar of all non-source files
task stripJar(type: JavaExec, dependsOn: extractScript) {
    mainClass = 'net.minecraftforge.jarsplitter.ConsoleTool'
    classpath = files(project.configurations.getByName('jarsplitter'))
    args('--input', BASE_JAR, '--slim', SLIM_JAR, '--extra', "${DIR_JARS}\\${MC_VERSION}-extra.jar", '--srg', SRG_FILE)
}

// Deobfuscates the JAR using the SRG file
task deobfJarSrg(type: JavaExec, dependsOn: stripJar) {
    main = 'net.minecraftforge.fart.Main'
    classpath = files(project.configurations.getByName('forgeart'))
    args('--input', SLIM_JAR, '--output', SRG_JAR, '--map', SRG_FILE)
}

// Creates a JSON inheritance map of the JAR using Forge's InstallerTools
task extractInheritance(type: JavaExec, dependsOn: deobfJarSrg) {
    main = 'net.minecraftforge.installertools.ConsoleTool'
    classpath = files(project.configurations.getByName('installertools'))
    args('--task', 'EXTRACT_INHERITANCE', '--input', SRG_JAR, '--output', INHERITANCE)
}

// Dumps constructor info from inheritance map into a text file
task dumpConstructors(type: DumpConstructors, dependsOn: extractInheritance) {
    json = file(INHERITANCE)
    constructors = file("${DIR_BUILD}\\map_data\\constructors.txt")
}

// Adds the constructors to the SRG file.
task addConstructors(type: AddConstructors, dependsOn: dumpConstructors) {
    srg = file(SRG_FILE)
    constructors = file("${DIR_BUILD}\\map_data\\constructors.txt")
    newSrg = file(SRG_FILE = "${DIR_MAPPINGS}\\${MC_VERSION}-ctrs.srg")
}

// Uses Forge's SrgUtils to easily convert SRG to TSRGv2
task srg2Tsrg(type: Srg2Tsrg, dependsOn: addConstructors) {
    srg = file(addConstructors.newSrg)
    tsrg = file(TSRG_FILE_BASE)
}

// Auto-generates param names and adds them to the TSRG file.
task addParams(type: AddParams, dependsOn: srg2Tsrg) {
    tsrg = file(TSRG_FILE_BASE)
    jar = file(SRG_JAR)
    newTsrg = file(TSRG_FILE)
}

// Converts a template exceptions file with SRG names to one with notch (obfuscated) names.
task updateExc(type: UpdateExc) {
    excOld = file("${DIR_CFG}\\exceptions-base.txt")
    srg = file(SRG_FILE)
    excNew = file("${DIR_DATA}\\wip-mappings\\exceptions.txt")
}

// Creates an empty params csv file
task createParamsCsv(type: CreateParamsCsv) {
    tsrg = file(TSRG_FILE)
    csv = file(PARAMS_CSV)
}

// Converts the fields from SRG to MCP.
task applyFieldsCSV(type: ApplyCsv) {
    script = file(TSRG_FILE)
    csv = file(FIELDS_CSV)
}

// Converts the methods from SRG to MCP.
task applyMethodsCSV(type: ApplyCsv) {
    script = file(TSRG_FILE)
    csv = file(METHODS_CSV)
}

// Converts the params to a SRG file.
task applyParamsCsv(type: ApplyCsv) {
    script = file(TSRG_FILE)
    csv = file(PARAMS_CSV)
}

/**
 * Everything beyond this point is WIP
 */

// Copies the final SRG file into the final directory.
task copySRGToFinal(type: Copy) {
    from file(SRG_FILE)
    into file("final\\srg\\alpha\\")
}

// Testing task for deobfuscating the JAR using RetroGuard.
task testDeobfJar(type: JavaExec) {
    mainClass = "RetroGuard"
    classpath = files(project.configurations.findByName("retroguard"))
    args("-searge", "${DIR_DATA}\\cfg\\retroguard.cfg")
}

// Injects the JAR with exceptions
task testInjectJar(type: JavaExec) {
    mainClass = 'de.oceanlabs.mcp.mcinjector.MCInjector'
    classpath = files(project.configurations.getByName("mcinject"))
    args('--in', BASE_JAR, '--out', INJECT_JAR, "--lvt=LVT", '--exc', DIR_BUILD + '/map_data/exceptions.txt')
}

// Testing task for unzipping the JAR in order to peek into the class files using IntelliJ's built-in version of Fernflower.
task testUnzipJar(type: Copy) {
    from zipTree(file(DECOMP_JAR))
    into file(DIR_TEMP)
}

// Testing task for reobfuscation
task testReobfJar(type: JavaExec) {
    mainClass = "RetroGuard"
    classpath = files(project.configurations.getByName("retroguard"))
    args("-notch", "${DIR_DATA}\\cfg\\retroguard.cfg")
}


